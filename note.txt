・グレースケール化
色味のない明るさの度合いだけで表現
色の強度という1つの情報にまとめられる

・ヒストグラム均一化
色の明暗をよりハッキリと

・平滑化
ノイズを取り除く

・Canny
輝度の勾配からエッジを検出

・γ変換
明るさの変換方法
γ < 1 画像が明るくなる
γ > 1 画像が暗くなる

・トラックバー
その場で明るさを変更できる

・2値化
白黒にする
THRESH_BINALY = 基準値は自分で決める
THRESH_OTSU = 基準値は自動
adaptivethreshold = 影の部分も検出したい場合に強い

・アファイン変換
画像の移動や回転に関わる動作

・畳み込み
周囲の情報を使った自分の画素値の更新
フィルター(1マスを9つに分割) * 画素値
全ての画素について畳み込み

・透視変換
奥行きを作る

・フィルター
Blur
GaussianBlur(範囲には奇数を与える, 分散)
nedianfilter(中央値に塗りつぶす)
bilateralfilter(輝度変化がなだらかな部分を塗りつぶす)
sobel→x方向とy方向でそれぞれ微分してエッジを検出 左からのエッジと上からのエッジが検出しやすい abs()で合成できる
laplacian→方向がないので全体満遍なく検出　エッジ薄いと感じた場合は2倍する　ノイズが気になる場合はここから平滑化フィルター
convertScaleAbs→画像の絶対値を変換
canny→ガウシアンでぼかす、sobelで微分、極大点を探す、2段階の閾値処理でエッジ検出


・微分
ある区間の傾きを割り出す f(x + dx) - f(x) / dx

#画像処理全体のルール
画像の原点は左上

#OpenCV全体の約束事
画素の順番はBGRの順で入る
(Python)numpyのarrayにはy, x, colorの順に格納

間違い探しを解決する場合は、リサイズして拡大したほうが良いかも？
画像を縮小する場合にはINTER_AREAを使用すたほうがきれいに仕上がる
